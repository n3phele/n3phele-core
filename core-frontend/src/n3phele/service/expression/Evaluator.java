/* Generated By:JavaCC: Do not edit this line. Evaluator.java */
package n3phele.service.expression;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import n3phele.service.actions.tasks.ActionLog;
import n3phele.service.model.core.ParameterType;
import n3phele.service.model.core.TypedParameter;

/** N3phele expression evaluator */
@SuppressWarnings({"serial", "unused", "unchecked"})
public class Evaluator implements EvaluatorConstants {
        private final static Logger log = Logger.getLogger(Evaluator.class.getName());

        Map<String,Map<String,TypedParameter>> context = null;

        public static void invoke(List<TypedParameter>parameters, Map<String,Map<String,TypedParameter>> context, ActionLog actionLog) {
                Map<String,TypedParameter> varSet = new HashMap<String,TypedParameter>();
                context.put("$$$", varSet);
                for(TypedParameter p : parameters) {
                        varSet.put(p.getName(), p);
                }
                for(TypedParameter p : parameters) {
                        String arg="";
                        try {
                                arg = p.value();
                                if(arg == null || arg.length() == 0)
                                        arg = p.defaultValue();
                    if(p.getType().equals(ParameterType.String) || p.getType().equals(ParameterType.Secret)) {
                        if(!arg.startsWith("\u005c"") && !arg.startsWith("$<") && !arg.startsWith("("))
                            arg = "\u005c"" + arg + "\u005c"";
                    }
                                Evaluator x = new Evaluator(arg, context);
                                Object o;
                                String result = null;
                                if(p.getType().equals(ParameterType.List)) {
                                        o = x.Expression();

                                        if(o instanceof List) {
                                result = listToString((List<Object>)o);
                                        } else {
                                                StringBuffer b = new StringBuffer();
                                b.append("[");
                                                if(o instanceof String) {
                                                        b.append("\u005c"");
                                        b.append((String)o);
                                        b.append("\u005c"");
                                                } else {
                                                        b.append(String.valueOf(o));
                                                }
                                                b.append("]");
                                result = b.toString();
                                        }

                        p.setValue(result);
                                } else {
                                        o = x.Expression();
                                        if(o instanceof String) result = (String)o;
                                        else if(o instanceof List) result = listToString((List<Object>)o);
                                        else if(o instanceof Integer) result = ((Integer)o).toString();
                                        else if(o instanceof Double) result = ((Double)o).toString();
                                        switch(p.getType()) {
                                        case Boolean:
                                                if(o instanceof Integer)
                                                        p.setValue(Boolean.valueOf((Integer)o != 0).toString());
                                                else
                                                        p.setValue(Boolean.valueOf(result).toString());
                                                break;
                                        default:
                                        case String:
                                        case Secret:
                                                p.setValue(result);
                                                break;
                                        case Long:
                                                if(o instanceof Integer)
                                                        p.setValue(result);
                                                else if(o instanceof Double)
                                                        p.setValue(Long.toString(((Double)o).longValue()));
                                                else
                                                        p.setValue(Long.valueOf(result).toString());
                                                break;
                                        case Double:
                                                if(o instanceof Double)
                                                        p.setValue(result);
                                                else
                                                        p.setValue(Double.valueOf(result).toString());
                                                break;
                                        }
                                }
                        } catch (Exception error) {
                    log.log(Level.WARNING, "Expression error "+p.getName()+" "+arg, error);
                    if(actionLog != null)
                            actionLog.error("Expression error "+p.getName()+" "+arg+" "+error.getMessage());
                    p.setValue("");
                    throw new IllegalArgumentException(error);
            } catch (TokenMgrError parser) {
                log.log(Level.WARNING, "Expression error "+p.getName()+" "+arg+parser.getMessage()+" Reason: "+parser.errorCode);
                if(actionLog != null)
                        actionLog.error("Expression error "+p.getName()+" "+arg+" "+parser.getMessage());
                p.setValue("");
                throw new IllegalArgumentException(parser);
            }
                }
        }

        private static String listToString(List<Object> o) {
                StringBuffer b = new StringBuffer();
        b.append("[");

                int i = 0;
                for(Object obj : o) {
                        if(i++ > 0)
                                b.append(",");
                        if(obj instanceof String) {
                                b.append("\u005c"");
                                b.append((String)obj);
                                b.append("\u005c"");
                        } else {
                                b.append(String.valueOf(obj));
                        }
                }

                b.append("]");
        return b.toString();

        }

        private static String listToString(List<Object> o, Object seperatorField, Object quotesField) {
            StringBuffer b = new StringBuffer();
            String seperator = " ";
            char leftQuote = 0;
            char rightQuote = 0;
            if(seperatorField instanceof String) {
                    seperator = (String)seperatorField;
            }
            if(quotesField instanceof String) {
                    String target = (String)quotesField;
                    if(target!= null && target.length() > 0)
                            leftQuote = target.charAt(0);
                    if(target!= null && target.length() > 1)
                            rightQuote = target.charAt(1);
            }

            int i = 0;
            for(Object obj : o) {
                    if(i++ > 0)
                            b.append(seperator);
                    if(obj instanceof String) {
                            if(leftQuote != 0) b.append(leftQuote);
                            b.append((String)obj);
                            if(rightQuote != 0) b.append(rightQuote);
                    } else {
                                if(leftQuote != 0) b.append(leftQuote);
                            b.append(String.valueOf(obj));
                            if(rightQuote != 0) b.append(rightQuote);
                    }
            }

        return b.toString();

    }


        /** Main entry point. */
        public Evaluator(String expression, Map<String, Map<String,TypedParameter>> context) {
                this(new java.io.StringReader(expression));
                this.context = context;
        }

        private Object lookup(String key) throws ParseException {
                String arg="";
                try {
                        String variable = key.substring(2,key.length()-1);
                        String bits[] = variable.split("\u005c\u005c.");
                        Map<String,TypedParameter> varSet = context.get(bits[0]);
                        if(varSet == null) {
                                varSet = context.get("$$");
                                if(varSet.containsKey(bits[0])) {
                                        bits = ("$$."+variable).split("\u005c\u005c.");
                                } else {
                        varSet = context.get("$$$");
                        if(varSet.containsKey(bits[0])) {
                        bits = ("$$$."+variable).split("\u005c\u005c.");
                        }
                }
                        }
                        if(varSet != null && bits.length > 1) {
                                TypedParameter p = varSet.get(bits[1]);
                                if(p != null) {
                                        arg = p.value();
                                        if(arg == null || arg.length() == 0)
                                                arg = p.defaultValue();
                                        switch (p.getType()) {
                                        case Boolean:
                                                if(Boolean.valueOf(arg))
                                                        return new Integer(1);
                                                else
                                                        return new Integer(0);
                                        case Long:
                                                return new Integer(arg);
                                        case Double:
                                                return new Double(arg);
                                        case List:
                                                Evaluator internal = new Evaluator(arg, context);
                                                try {
                                return internal.SimpleListExpression();
                        } catch (TokenMgrError err) {
                                throw new ParseException("Error loading "+bits[0]+"."+bits[1]+":"+err.getMessage());
                        }
                                        case String:
                                        case Secret:
                                        default:
                                                return arg;
                                        }
                                }
                        }
                } catch (Exception e) {
                        throw new ParseException("Exception handling "+key+" "+e.getMessage());
                }

                throw new ParseException("unknown variable "+key);
        }

    int asInteger(Object o) {
            int i = 0;
                if(o instanceof Integer) i = (Integer)o;
            else if(o instanceof Double) i = ((Double)o).intValue();
            else if(o instanceof String) i = Integer.valueOf((String)o);
        return i;
    }

  final public Object Expression() throws ParseException {
                       Object o;
    o = ConditionalExpression();
                                                  {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Object FunctionExpression() throws ParseException {
                                Object o = null; Object pattern; Object field; Object field2; Object target;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      target = Expression();
      jj_consume_token(16);
      pattern = Expression();
      jj_consume_token(16);
      field = AdditiveExpression();
      jj_consume_token(17);
                        if(target instanceof Integer)
                                target = ((Integer)target).toString();
                        else if(target instanceof Double)
                                target = ((Double)target).toString();

                        if(pattern instanceof Integer)
                                pattern = ((Integer)pattern).toString();
                        else if(pattern instanceof Double)
                                pattern = ((Double)pattern).toString();

                        int selector = 0;
                        if(field instanceof Double)
                                selector = (int) ((Double)field).longValue();
                        else if(field instanceof Integer)
                                selector = (int) ((Integer)field);
                        else if(field instanceof String)
                                selector = Integer.valueOf((String)field);
                        try {
                Pattern p = Pattern.compile((String) pattern);
                Matcher matcher = p.matcher((String)target);
                matcher.find();
                o = matcher.group(selector);
                        }  catch (IllegalStateException e) {
                                o = "";
            } catch (Exception e) {
                                {if (true) throw new ParseException(e.getMessage());}
                        }

                        {if (true) return o;}
      break;
    case 18:
      jj_consume_token(18);
      field = Expression();
      jj_consume_token(16);
      field2 = Expression();
      jj_consume_token(17);
                        if(field instanceof Double) {
                                if(field2 instanceof Double) {
                                        o = ((Double)field2 > (Double)field)? field2 : field;
                                } else if(field2 instanceof Integer) {
                                        o = ((Integer)field2 > (Double)field)? field2 : field;
                                } else {
                                        o = (Double.valueOf((String)field2) > (Double)field)? field2 : field;
                                }
                        } else if(field instanceof Integer) {
                                if(field2 instanceof Double) {
                                        o = ((Double)field2 > (Integer)field)? field2 : field;
                                } else if(field2 instanceof Integer) {
                                        o = ((Integer)field2 > (Integer)field)? field2 : field;
                                } else {
                                        o = (Integer.valueOf((String)field2) > (Integer)field)? field2 : field;
                                }

                        } else if(field2 instanceof Double) {
                                o = (((Double)field2) > Double.valueOf((String)field))? field2 : field;

                        } else if(field2 instanceof Integer) {
                                o = (((Integer)field2) > Integer.valueOf((String)field))? field2 : field;
                        } else {
                                o = (((String)field2).compareTo((String)field )>0) ? field2 : field;
                        }
                        {if (true) return o;}
      break;
    case 19:
      jj_consume_token(19);
      field = Expression();
      jj_consume_token(16);
      field2 = Expression();
      jj_consume_token(17);
                        if(field instanceof Double) {
                                if(field2 instanceof Double) {
                                        o = ((Double)field2 < (Double)field)? field2 : field;
                                } else if(field2 instanceof Integer) {
                                        o = ((Integer)field2 < (Double)field)? field2 : field;
                                } else {
                                        o = (Double.valueOf((String)field2) > (Double)field)? field2 : field;
                                }
                        } else if(field instanceof Integer) {
                                if(field2 instanceof Double) {
                                        o = ((Double)field2 < (Integer)field)? field2 : field;
                                } else if(field2 instanceof Integer) {
                                        o = ((Integer)field2 < (Integer)field)? field2 : field;
                                } else {
                                        o = (Integer.valueOf((String)field2) > (Integer)field)? field2 : field;
                                }

                        } else if(field2 instanceof Double) {
                                o = (((Double)field2) < Double.valueOf((String)field))? field2 : field;

                        } else if(field2 instanceof Integer) {
                                o = (((Integer)field2) < Integer.valueOf((String)field))? field2 : field;
                        } else {
                                o = (((String)field2).compareTo((String)field )<0) ? field2 : field;
                        }
                        {if (true) return o;}
      break;
    case 20:
      jj_consume_token(20);
      o = Expression();
      jj_consume_token(17);
                                           if(o==null) {if (true) return 0;}
                                                                                          else if(o instanceof String) {if (true) return ((String)o).length();}
                                                                                          else if(!(o instanceof List)) {if (true) return 1;}
                                                                                          else {if (true) return ((List<Object>)o).size();}
      break;
    case 21:
      jj_consume_token(21);
      o = Expression();
      jj_consume_token(16);
      field = Expression();
      jj_consume_token(16);
      field2 = Expression();
      jj_consume_token(17);
                                                                                          if(o==null) {if (true) return 0;}
                                                                                          else if(!(o instanceof List)) {if (true) return o;}
                                                                                          else {if (true) return listToString(((List<Object>)o), field, field2);}
      break;
    case 22:
      jj_consume_token(22);
      o = Expression();
      jj_consume_token(17);
                                           if(o==null) {if (true) return 0;}
                                                                                          else if(!(o instanceof String)) {if (true) return o;}
                                                                                          else {if (true) return StringEscapeUtils.escapeJavaString((String)o);}
      break;
    case 23:
      jj_consume_token(23);
      o = Expression();
      jj_consume_token(17);
                                             if(o==null) {if (true) return 0;}
                                                                                          else if(!(o instanceof String)) {if (true) return o;}
                                                                                          else {if (true) return StringEscapeUtils.unescapeJavaString((String)o);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object ConditionalExpression() throws ParseException {
                                  Object o1; Object o2; Object o3;
    o1 = LogicalORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
      o2 = Expression();
      jj_consume_token(25);
      o3 = ConditionalExpression();
                        Integer i1;
                        if(o1 instanceof Integer) {
                                i1 = (Integer) o1;

                                o1 = i1 != 0 ? o2 : o3;
                        } else {
                                o1 = o3;
                        }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
            {if (true) return o1;}
    throw new Error("Missing return statement in function");
  }

  final public Object LogicalORExpression() throws ParseException {
                                Object o; Object o2;
    o = LogicalANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      o2 = LogicalORExpression();
                                       if(o instanceof Integer &&
                                                                                                  o2 instanceof Integer) {
                                                                                                        Integer i = (Integer) o;
                                                                                                        Integer i2 = (Integer) o2;
                                                                                                        Integer result;
                                                                                                        result = ((i == 1 || i2 == 1) ? 1 : 0);
                                                                                                        o = result;
                                                                                                  }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
            {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Object LogicalANDExpression() throws ParseException {
                                  Object o; Object o2;
    o = EqualityExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      jj_consume_token(27);
      o2 = LogicalANDExpression();
                                              if(o instanceof Integer &&
                                                                                                  o2 instanceof Integer) {
                                                                                                        Integer i = (Integer) o;
                                                                                                        Integer i2 = (Integer) o2;
                                                                                                        Integer result;
                                                                                                        result = ((i == 1 && i2 == 1) ? 1 : 0);
                                                                                                        o = result;
                                                                                                  }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
                    {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Object EqualityExpression() throws ParseException {
                               Object o; String op; Object o2; Integer result;
    o = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
    case 29:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        jj_consume_token(28);
                                                                          op = "==";
        break;
      case 29:
        jj_consume_token(29);
                                                                          op = "!=";
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      o2 = EqualityExpression();
                                                    if(o instanceof Double || o2 instanceof Double) {
                                                                                                if(o instanceof Integer) o = (double) ((Integer)o);
                                                                                                if(o2 instanceof Integer) o2 = (double) ((Integer)o2);
                                                                                        }
                                                                                        if(op == "==") {
                                                                                            result = o.equals(o2) ? 1 : 0;
                                                                                        } else {
                                                                                                result = !o.equals(o2) ? 1 : 0;
                                                                                        }
                                                                                        o = result;
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
                          {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Object RelationalExpression() throws ParseException {
                                 Object o; String op; Object o2;
    o = AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
    case 31:
    case 32:
    case 33:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        jj_consume_token(30);
                                                                                                  op = "<";
        break;
      case 31:
        jj_consume_token(31);
                                                                                                  op = ">";
        break;
      case 32:
        jj_consume_token(32);
                                                                                                  op = "<=";
        break;
      case 33:
        jj_consume_token(33);
                                                                                                  op = ">=";
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      o2 = RelationalExpression();
                                                                          if(o instanceof Double || o2 instanceof Double) {
                                                        Double i=0.0;
                                                        Double i2=0.0;
                                                        Integer result = 0;
                                                        if(o instanceof Double || o instanceof Integer) {
                                                                if(o instanceof Double)
                                                                        i = (Double)o;
                                                                else
                                                                        i = (double) ((Integer)o);
                                                        }
                                                        if(o2 instanceof Double || o2 instanceof Integer) {
                                                                if(o2 instanceof Double)
                                                                        i2 = (Double)o2;
                                                                else
                                                                        i2 = (double) ((Integer)o2);
                                                        }
                                                        if(op == "<") {
                                                                result = i < i2 ? 1 : 0;
                                                        } else if(op == ">") {
                                                                result = i > i2 ? 1 : 0;
                                                        } else  if(op == "<=") {
                                                                result = i <= i2 ? 1 : 0;
                                                        } else if(op == ">=") {
                                                                result = i >= i2 ? 1 : 0;
                                                        }
                                                        o = result;

                                                          } else if(o instanceof Integer &&
                                                                  o2 instanceof Integer) {

                                                                Integer i = (Integer)o;
                                                                Integer i2 = (Integer)o2;
                                                                if(op == "<") {
                                                                        i = i < i2 ? 1 : 0;
                                                                } else if(op == ">") {
                                                                        i = i > i2 ? 1 : 0;
                                                                } else  if(op == "<=") {
                                                                        i = i <= i2 ? 1 : 0;
                                                                } else if(op == ">=") {
                                                                        i = i >= i2 ? 1 : 0;
                                                                }
                                                                o = i;
                                                          }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
                  {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Object AdditiveExpression() throws ParseException {
                               Object o; String op; Object o2;
    o = MultiplicativeExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
    case 35:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
                                                                          op = "+";
        break;
      case 35:
        jj_consume_token(35);
                                                                          op = "-";
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      o2 = AdditiveExpression();
                                                          if(op == "-") {
                                                if(o instanceof Integer &&
                                                   o2 instanceof Integer)
                                                   o = (Integer)o - (Integer)o2;
                                                else if((o instanceof Double || o instanceof Integer)
                                                         && (o2 instanceof Double || o2 instanceof Integer)) {
                                                                Double a1;
                                                                Double a2;
                                                                if(o instanceof Double)
                                                                        a1 = (Double)o;
                                                                else
                                                                        a1 = (double) ((Integer)o);
                                                                if(o2 instanceof Double)
                                                                        a2 = (Double)o2;
                                                                else
                                                                        a2 = (double) ((Integer)o2);

                                                        o = a1 - a2;
                                                }
                                                  } else {
                                                        if(o instanceof Integer || o instanceof Double) {
                                                                if(o2 instanceof Integer || o2 instanceof Double) {
                                                                        if(o instanceof Integer && o2 instanceof Integer)
                                                                                o = (Integer)o + (Integer)o2;
                                                                        else {
                                                                                Double a1;
                                                                                Double a2;
                                                                                if(o instanceof Double)
                                                                                        a1 = (Double)o;
                                                                                else
                                                                                        a1 = (double) ((Integer)o);
                                                                                if(o2 instanceof Double)
                                                                                        a2 = (Double)o2;
                                                                                else
                                                                                        a2 = (double) ((Integer)o2);

                                                                            o = a1 + a2;
                                                                        }
                                                                } else {
                                                                        if(o instanceof Integer)
                                                                                o = ((Integer)o).toString()+(String)o2;
                                                                        else
                                                                                o = ((Double)o).toString()+(String)o2;
                                                                }
                                                        } else if(o instanceof String) {
                                                                if(o2 instanceof Integer) {
                                                                        o = (String)o + ((Integer)o2).toString();
                                                                } else if(o2 instanceof Double) {
                                                                        o = (String)o + ((Double)o2).toString();
                                                                } else{
                                                                        o = (String)o + (String)o2;
                                                                }

                                                        } else if(o instanceof List) {
                                                                        if(!(o2 instanceof List)) {
                                                                        o = ((List<Object>)o).add(o2);
                                                                } else{
                                                                        ((List<Object>)o).addAll((List<Object>)o2);
                                                                }
                                                        }
                                                    }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
          {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Object MultiplicativeExpression() throws ParseException {
                                     Object o; String op; Object op2;
    o = UnaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
    case 37:
    case 38:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
                                          op = "*";
        break;
      case 37:
        jj_consume_token(37);
                                          op = "/";
        break;
      case 38:
        jj_consume_token(38);
                                          op = "%";
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      op2 = MultiplicativeExpression();
                                                          if(o instanceof Integer && op2 instanceof Integer) {
                                                    Integer result = (Integer) o;
                                                    Integer i2 = (Integer) op2;
                                                            if(op == "*") result = result * i2;
                                                            else if(op == "/") result = result / i2;
                                                            else if(op == "%") result = result % i2;
                                                            o = result;

                                                          } else if((o instanceof Double) && op2 instanceof Integer) {
                                                            Double result = (Double) o;
                                                            Integer i2 = (Integer) op2;
                                                            if(op == "*") result = result * i2;
                                                            else if(op == "/") result = result / i2;
                                                            else if(op == "%") result = result % i2;
                                                            o = result;

                                                          } else if((o instanceof Double) && op2 instanceof Double) {
                                                    Double result = (Double) o;
                                                    Double i2 = (Double) op2;
                                                            if(op == "*") result = result * i2;
                                                            else if(op == "/") result = result / i2;
                                                            else if(op == "%") result = result % i2;
                                                            o = result;
                                                          } else if((o instanceof Integer) && op2 instanceof Double) {
                                                    Double result = (double)((Integer) o);
                                                    Double i2 = (Double) op2;
                                                            if(op == "*") result = result * i2;
                                                            else if(op == "/") result = result / i2;
                                                            else if(op == "%") result = result % i2;
                                                            o = result;
                                                          }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
                                                                                          {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Object UnaryExpression() throws ParseException {
                            String op = null; Object o; Object[] post = new Object[0];
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 15:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 41:
    case 43:
      o = ListIndexExpression();
      break;
    case 34:
    case 35:
    case 39:
    case 40:
      op = UnaryOperator();
      o = UnaryExpression();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(o instanceof Integer) {
                Integer i = 0;
                i = (Integer) o;
                if(op == "-")
                        i = -i;
                else if(op == "~")
                        i = ~i;
                else if(op == "!") {
                        if(i == 0)
                                i = 1;
                        else
                                i = 0;
                }
                o = i;
        } else if(o instanceof Double) {
                Double i;
                i = (Double) o;
                Object result = i;
                if(op == "-")
                        result = -i;
                else if(op == "~")
                        result = (double) ~(i.longValue());
                else if(op == "!") {
                        if(i == 0)
                                result = new Integer(1);
                        else
                                result = new Integer(0);
                }
                o = result;
        }
                {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public String UnaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
                                          {if (true) return "+";}
      break;
    case 35:
      jj_consume_token(35);
                                          {if (true) return "-";}
      break;
    case 39:
      jj_consume_token(39);
                                          {if (true) return "~";}
      break;
    case 40:
      jj_consume_token(40);
                                          {if (true) return "!";}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object ListIndexExpression() throws ParseException {
                                 Object p; Object o; Object o2;
    p = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      if (jj_2_1(3)) {
        jj_consume_token(41);
        o = Expression();
        jj_consume_token(42);
                                                    if(p instanceof List) p = ((List<Object>)p).get(asInteger(o));
                                                                    else {
                                                                        ArrayList<Object> l = new ArrayList<Object>(1);
                                                                        l.add(p);
                                                                        p = l.get(asInteger(o));
                                                                    }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          jj_consume_token(41);
          o = Expression();
          jj_consume_token(16);
          o2 = Expression();
          jj_consume_token(42);
                                                                  if(p instanceof List) p = ((List<Object>)p).subList(asInteger(o), asInteger(o2));
                                                                    else {
                                                                        ArrayList<Object> l = new ArrayList<Object>(1);
                                                                        l.add(p);
                                                                        p = l.subList(asInteger(o), asInteger(o2));
                                                                    }
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Object PrimaryExpression() throws ParseException {
                              Object o; Token t; List<Object> list;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
      o = Constant();
                                                                                           {if (true) return o;}
      break;
    case 43:
      jj_consume_token(43);
      o = Expression();
      jj_consume_token(17);
                                                  {if (true) return o;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                                                          {if (true) return lookup(t.image);}
      break;
    case 41:
      list = SimpleListExpression();
                                                  {if (true) return list;}
      break;
    case 15:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      o = FunctionExpression();
                                                  {if (true) return o;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Object> SimpleListExpression() throws ParseException {
                                       List<Object> list; Token t;
    if (jj_2_2(2)) {
      jj_consume_token(41);
      list = ListOfObjects();
      jj_consume_token(42);
                                                                  {if (true) return list;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
        jj_consume_token(42);
                                                                  {if (true) return new ArrayList<Object>();}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Object> ListOfObjects() throws ParseException {
                                List<Object> list = new ArrayList<Object>(); Object o1; Object o2;
    o1 = Expression();
                                          list.add(o1);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_1;
      }
      jj_consume_token(16);
      o2 = Expression();
                                          list.add(o2);
    }
                                                                  {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Object Constant() throws ParseException {
                     Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                                                  {if (true) return Integer.decode(t.image);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                                                  {if (true) return t.image.substring(1,t.image.length()-1);}
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                          {if (true) return Double.valueOf(t.image);}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_33()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_3() {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(41)) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(19)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_3R_5()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(23)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(21)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(20)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_13()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_2() {
    if (jj_3R_4()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public EvaluatorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfc8000,0x1000000,0x4000000,0x8000000,0x30000000,0x30000000,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0xfc9a20,0x0,0x0,0x0,0xfc9a20,0x0,0x10000,0xa20,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0xc,0xc,0x70,0x70,0xb8c,0x18c,0x200,0x200,0xa00,0x200,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Evaluator(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Evaluator(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EvaluatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Evaluator(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EvaluatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Evaluator(EvaluatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EvaluatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
